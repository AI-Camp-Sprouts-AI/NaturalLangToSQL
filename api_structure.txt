paths:
  /customer/{customerId}:
    get:
      tags:
        - customer
      summary: Find customer by ID
      description: Returns a single customer
      operationId: getCustomerById
      parameters:
        - name: customerId
          in: path
          description: ID of customer to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid ID supplied
        '404':
          description: Customer not found
      security:
        - api_key: []
        - store_auth:
            - write:customers
            - read:customers
    post:
      tags:
        - customer
      summary: Updates a customer in the store with form data
      description: ''
      operationId: updateCustomerWithForm
      parameters:
        - name: customerId
          in: path
          description: ID of customer that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of customer that needs to be updated
          schema:
            type: string
        - name: email
          in: query
          description: Email of customer that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - store_auth:
            - write:customers
            - read:customers
  /customer/{customerId}/orders:
    get:
      tags:
        - order
      summary: Find orders by customer ID
      description: Returns a list of orders for a specific customer
      operationId: getOrdersByCustomerId
      parameters:
        - name: customerId
          in: path
          description: ID of customer to return orders for
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: Orders not found
      security:
        - api_key: []
        - store_auth:
            - read:orders
components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        productId:
          type: integer
          format: int64
        quantity:
          type: integer